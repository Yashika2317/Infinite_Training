//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrainDBEntities : DbContext
    {
        public TrainDBEntities()
            : base("name=TrainDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking_Data> Booking_Data { get; set; }
        public virtual DbSet<Cancellation_Data> Cancellation_Data { get; set; }
        public virtual DbSet<Train> Trains { get; set; }
    
        public virtual int AddTrain(Nullable<int> trainNo, string trainName, string @class, Nullable<int> totalBerths, Nullable<int> availableBerths, string source, string destination, Nullable<System.DateTime> dateOfTravel, Nullable<int> fare, string trainStatus)
        {
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("TotalBerths", totalBerths) :
                new ObjectParameter("TotalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("AvailableBerths", availableBerths) :
                new ObjectParameter("AvailableBerths", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("DateOfTravel", dateOfTravel) :
                new ObjectParameter("DateOfTravel", typeof(System.DateTime));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(int));
    
            var trainStatusParameter = trainStatus != null ?
                new ObjectParameter("TrainStatus", trainStatus) :
                new ObjectParameter("TrainStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrain", trainNoParameter, trainNameParameter, classParameter, totalBerthsParameter, availableBerthsParameter, sourceParameter, destinationParameter, dateOfTravelParameter, fareParameter, trainStatusParameter);
        }
    
        public virtual int BookTrainTicket(string userName, Nullable<int> trainNo, string @class, Nullable<int> numTickets)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var numTicketsParameter = numTickets.HasValue ?
                new ObjectParameter("NumTickets", numTickets) :
                new ObjectParameter("NumTickets", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookTrainTicket", userNameParameter, trainNoParameter, classParameter, numTicketsParameter);
        }
    
        public virtual ObjectResult<CancelTrainTicket_Result> CancelTrainTicket(string userName, Nullable<int> trainNo, Nullable<int> numTicketsToCancel)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var numTicketsToCancelParameter = numTicketsToCancel.HasValue ?
                new ObjectParameter("NumTicketsToCancel", numTicketsToCancel) :
                new ObjectParameter("NumTicketsToCancel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CancelTrainTicket_Result>("CancelTrainTicket", userNameParameter, trainNoParameter, numTicketsToCancelParameter);
        }
    
        public virtual int DeleteTrain(Nullable<int> trainNo)
        {
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTrain", trainNoParameter);
        }
    
        public virtual int ModifyTrain(Nullable<int> trainNo, string trainName, string @class, Nullable<int> totalBerths, Nullable<int> availableBerths, string source, string destination, Nullable<System.DateTime> dateOfTravel, Nullable<int> fare, string trainStatus)
        {
            var trainNoParameter = trainNo.HasValue ?
                new ObjectParameter("TrainNo", trainNo) :
                new ObjectParameter("TrainNo", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("TotalBerths", totalBerths) :
                new ObjectParameter("TotalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("AvailableBerths", availableBerths) :
                new ObjectParameter("AvailableBerths", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var destinationParameter = destination != null ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(string));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("DateOfTravel", dateOfTravel) :
                new ObjectParameter("DateOfTravel", typeof(System.DateTime));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("Fare", fare) :
                new ObjectParameter("Fare", typeof(int));
    
            var trainStatusParameter = trainStatus != null ?
                new ObjectParameter("TrainStatus", trainStatus) :
                new ObjectParameter("TrainStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyTrain", trainNoParameter, trainNameParameter, classParameter, totalBerthsParameter, availableBerthsParameter, sourceParameter, destinationParameter, dateOfTravelParameter, fareParameter, trainStatusParameter);
        }
    }
}
